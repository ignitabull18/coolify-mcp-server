import { z } from 'zod';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { CoolifyAPIClient } from './api-client.js';

export function registerCoolifyPrompts(server: McpServer, apiClient: CoolifyAPIClient) {

  // ============ DEPLOYMENT PROMPTS ============

  server.registerPrompt(
    'deploy-application',
    {
      title: 'Deploy Application Workflow',
      description: 'Guide through deploying an application to Coolify with best practices',
      argsSchema: z.object({
        application_name: z.string().describe('Name of the application to deploy'),
        environment: z.enum(['production', 'staging', 'development']).default('production').describe('Target environment')
      })
    },
    async ({ application_name, environment }: { application_name: string; environment: string }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I want to deploy my application "${application_name}" to the ${environment} environment using Coolify. Please guide me through the complete deployment process including:

1. Setting up the application in Coolify
2. Configuring environment variables
3. Setting up domains and SSL
4. Deploying and monitoring the application
5. Best practices for ${environment} deployments

Please provide step-by-step instructions and let me know what information you need from me.`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `I'll help you deploy "${application_name}" to your ${environment} environment in Coolify. Let me break this down into clear steps:

## Step 1: Application Setup
First, I need some information:
- What type of application is this? (Next.js, React, Node.js, PHP, etc.)
- Do you have a Git repository URL?
- Which server do you want to deploy to?
- Which project should this belong to?

## Step 2: Pre-deployment Checklist
Before we start, let me check your Coolify setup:
- Available servers and their status
- Existing projects
- Current deployments

Let me gather this information first, then we'll proceed with the deployment.`
            }
          }
        ]
      };
    }
  );

  server.registerPrompt(
    'troubleshoot-deployment',
    {
      title: 'Troubleshoot Deployment Issues',
      description: 'Help diagnose and fix common deployment problems in Coolify',
      argsSchema: z.object({
        application_uuid: z.string().describe('UUID of the application having issues'),
        issue_description: z.string().describe('Description of the problem')
      })
    },
    async ({ application_uuid, issue_description }: { application_uuid: string; issue_description: string }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I'm having issues with my application deployment in Coolify. Application UUID: ${application_uuid}

Problem description: ${issue_description}

Please help me troubleshoot this issue by:
1. Checking the application status and logs
2. Identifying potential causes
3. Providing step-by-step solutions
4. Suggesting prevention strategies`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `I'll help you troubleshoot the deployment issue with application ${application_uuid}. Let me start by gathering diagnostic information:

## Diagnostic Steps:
1. **Application Status Check** - I'll check the current status of your application
2. **Log Analysis** - I'll retrieve and analyze the deployment logs
3. **Configuration Review** - I'll verify the application configuration
4. **Resource Validation** - I'll check server resources and dependencies

Let me begin the diagnostic process now...`
            }
          }
        ]
      };
    }
  );

  // ============ SETUP PROMPTS ============

  server.registerPrompt(
    'setup-new-project',
    {
      title: 'Set Up New Project',
      description: 'Guide through creating a new project with all necessary components',
      argsSchema: z.object({
        project_name: z.string().describe('Name for the new project'),
        project_type: z.enum(['web-app', 'api', 'microservice', 'full-stack']).describe('Type of project'),
        environment_count: z.number().min(1).max(5).default(1).describe('Number of environments needed')
      })
    },
    async ({ project_name, project_type, environment_count }: { project_name: string; project_type: string; environment_count: number }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I want to set up a new ${project_type} project called "${project_name}" in Coolify. I need ${environment_count} environment(s). Please guide me through:

1. Creating the project structure
2. Setting up the necessary servers
3. Configuring environments
4. Setting up databases if needed
5. Configuring domains and SSL
6. Best practices for this type of project`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `Perfect! I'll help you set up your ${project_type} project "${project_name}" with ${environment_count} environment(s). Let me guide you through the complete setup:

## Project Setup Plan:

### 1. Project Creation
- Create the main project in Coolify
- Set up proper naming and organization

### 2. Environment Planning
${environment_count === 1 ? '- Single environment setup (production)' : 
  `- Multiple environments: ${['production', 'staging', 'development'].slice(0, environment_count).join(', ')}`}

### 3. Infrastructure Requirements
For a ${project_type} project, you'll typically need:
${project_type === 'web-app' ? '- Web server capability\n- Static file hosting\n- SSL certificates' :
  project_type === 'api' ? '- Application server\n- Database (likely)\n- Environment variables for API keys' :
  project_type === 'microservice' ? '- Container orchestration\n- Service discovery\n- Load balancing' :
  '- Application server\n- Database server\n- File storage\n- Cache layer'}

Let me start by checking your current Coolify setup and available resources...`
            }
          }
        ]
      };
    }
  );

  server.registerPrompt(
    'database-setup',
    {
      title: 'Database Setup and Configuration',
      description: 'Guide through setting up and configuring databases in Coolify',
      argsSchema: z.object({
        database_type: z.enum(['postgresql', 'mysql', 'mariadb', 'mongodb', 'redis', 'dragonfly']).describe('Type of database to set up'),
        purpose: z.string().describe('What the database will be used for'),
        environment: z.enum(['production', 'staging', 'development']).default('production')
      })
    },
    async ({ database_type, purpose, environment }: { database_type: string; purpose: string; environment: string }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I need to set up a ${database_type} database for ${purpose} in my ${environment} environment. Please help me with:

1. Database configuration best practices
2. Security considerations
3. Backup strategies
4. Connection setup
5. Performance optimization
6. Monitoring setup`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `Excellent choice! I'll help you set up ${database_type} for ${purpose} in your ${environment} environment. Here's a comprehensive setup plan:

## ${database_type.toUpperCase()} Setup for ${environment.toUpperCase()}

### 1. Database Configuration
${database_type === 'postgresql' ? '- Enable proper extensions\n- Configure connection pooling\n- Set up proper user roles' :
  database_type === 'mysql' || database_type === 'mariadb' ? '- Configure InnoDB settings\n- Set up proper charset (utf8mb4)\n- Configure query cache' :
  database_type === 'mongodb' ? '- Set up replica sets if needed\n- Configure authentication\n- Set up indexes' :
  database_type === 'redis' || database_type === 'dragonfly' ? '- Configure persistence settings\n- Set up memory policies\n- Configure cluster if needed' : ''}

### 2. Security Setup
- Strong passwords and authentication
- Network isolation
- SSL/TLS encryption
${environment === 'production' ? '- Additional security hardening for production' : ''}

Let me check your current server setup and guide you through the process...`
            }
          }
        ]
      };
    }
  );

  // ============ MONITORING PROMPTS ============

  server.registerPrompt(
    'setup-monitoring',
    {
      title: 'Set Up Monitoring and Alerts',
      description: 'Guide through setting up comprehensive monitoring for Coolify resources',
      argsSchema: z.object({
        resource_type: z.enum(['application', 'database', 'service', 'server', 'all']).describe('What to monitor'),
        alert_level: z.enum(['basic', 'advanced', 'enterprise']).default('basic').describe('Level of monitoring detail')
      })
    },
    async ({ resource_type, alert_level }: { resource_type: string; alert_level: string }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I want to set up ${alert_level} monitoring for my ${resource_type === 'all' ? 'entire Coolify infrastructure' : resource_type} in Coolify. Please help me with:

1. Monitoring strategy and metrics to track
2. Alert configuration and thresholds
3. Dashboard setup
4. Log aggregation and analysis
5. Performance monitoring
6. Uptime monitoring
7. Cost optimization through monitoring`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `Great! I'll help you set up ${alert_level} monitoring for your ${resource_type === 'all' ? 'entire infrastructure' : resource_type}. Here's a comprehensive monitoring strategy:

## ${alert_level.toUpperCase()} Monitoring Setup

### 1. Key Metrics to Monitor
${resource_type === 'application' || resource_type === 'all' ? '**Application Metrics:**\n- Response time and latency\n- Error rates and status codes\n- Request volume and throughput\n- Memory and CPU usage\n- Deployment success rates\n\n' : ''}${resource_type === 'database' || resource_type === 'all' ? '**Database Metrics:**\n- Connection count and pooling\n- Query performance and slow queries\n- Storage usage and growth\n- Backup success and recovery time\n- Replication lag (if applicable)\n\n' : ''}${resource_type === 'server' || resource_type === 'all' ? '**Server Metrics:**\n- CPU, memory, and disk usage\n- Network I/O and bandwidth\n- Docker container health\n- System load and processes\n- Security events\n\n' : ''}

### 2. Alert Thresholds
${alert_level === 'basic' ? '- Essential health checks\n- Critical resource limits\n- Service availability' :
  alert_level === 'advanced' ? '- Performance degradation alerts\n- Predictive failure detection\n- Capacity planning alerts\n- Security anomaly detection' :
  '- Machine learning-based anomaly detection\n- Multi-dimensional correlation analysis\n- Business impact correlation\n- Advanced predictive analytics'}

Let me check your current resources and create a tailored monitoring plan...`
            }
          }
        ]
      };
    }
  );

  // ============ MAINTENANCE PROMPTS ============

  server.registerPrompt(
    'maintenance-workflow',
    {
      title: 'Maintenance and Updates Workflow',
      description: 'Guide through performing maintenance tasks and updates safely',
      argsSchema: z.object({
        maintenance_type: z.enum(['security-updates', 'application-updates', 'infrastructure-updates', 'database-maintenance']).describe('Type of maintenance to perform'),
        urgency: z.enum(['routine', 'urgent', 'emergency']).default('routine').describe('Urgency level of the maintenance')
      })
    },
    async ({ maintenance_type, urgency }: { maintenance_type: string; urgency: string }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I need to perform ${maintenance_type} with ${urgency} priority. Please provide a comprehensive maintenance workflow including:

1. Pre-maintenance checklist and preparations
2. Step-by-step maintenance procedures
3. Rollback strategies and safety measures
4. Testing and verification steps
5. Communication and documentation requirements
6. Post-maintenance monitoring and validation`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `I'll guide you through the ${maintenance_type} process with ${urgency} priority. Here's your comprehensive maintenance workflow:

## ${maintenance_type.toUpperCase()} - ${urgency.toUpperCase()} PRIORITY

### 1. Pre-Maintenance Checklist
${urgency === 'emergency' ? '⚠️ **EMERGENCY MAINTENANCE** ⚠️\n- Immediate assessment of critical impact\n- Stakeholder notification (if possible)\n- Emergency access verification\n\n' : ''}
- Create full backup of affected resources
- Document current system state
- Prepare rollback procedures
- Schedule maintenance window
${urgency !== 'emergency' ? '- Notify stakeholders and users\n- Set up monitoring alerts' : ''}

### 2. Maintenance Procedures
${maintenance_type === 'security-updates' ? '- Inventory all security patches needed\n- Test updates in staging environment\n- Apply updates in order of criticality\n- Verify security configurations' :
  maintenance_type === 'application-updates' ? '- Review application changelog\n- Update dependencies and packages\n- Run automated tests\n- Deploy with blue-green strategy if possible' :
  maintenance_type === 'infrastructure-updates' ? '- Update operating system packages\n- Update Docker and container runtime\n- Update Coolify platform\n- Verify all services restart correctly' :
  '- Check database integrity\n- Optimize tables and indexes\n- Clean up old logs and data\n- Update statistics and analyze'}

### 3. Safety Measures
- Automated rollback triggers
- Health check monitoring
- Performance baseline comparison

Let me check your current system status and create a specific maintenance plan...`
            }
          }
        ]
      };
    }
  );

  // ============ OPTIMIZATION PROMPTS ============

  server.registerPrompt(
    'performance-optimization',
    {
      title: 'Performance Optimization Analysis',
      description: 'Analyze and optimize performance of Coolify resources',
      argsSchema: z.object({
        focus_area: z.enum(['application', 'database', 'infrastructure', 'network', 'storage']).describe('Area to optimize'),
        current_issues: z.string().optional().describe('Current performance issues observed')
      })
    },
    async ({ focus_area, current_issues }: { focus_area: string; current_issues?: string }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I want to optimize the performance of my ${focus_area} in Coolify. ${current_issues ? `Current issues I'm experiencing: ${current_issues}` : 'I want to proactively optimize performance.'}

Please help me with:
1. Performance analysis and benchmarking
2. Identifying bottlenecks and optimization opportunities
3. Implementation recommendations
4. Monitoring and measurement strategies
5. Cost vs performance trade-offs
6. Long-term scalability planning`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `Perfect! I'll help you optimize your ${focus_area} performance in Coolify. ${current_issues ? `I'll particularly focus on addressing: ${current_issues}` : 'We\'ll take a comprehensive approach to optimization.'}

## ${focus_area.toUpperCase()} Performance Optimization Plan

### 1. Current State Analysis
Let me first gather performance data from your ${focus_area}:
${focus_area === 'application' ? '- Response times and throughput metrics\n- Resource utilization patterns\n- Error rates and availability\n- Code-level performance profiling' :
  focus_area === 'database' ? '- Query performance and execution plans\n- Connection pooling and concurrency\n- Storage I/O patterns\n- Index usage and optimization opportunities' :
  focus_area === 'infrastructure' ? '- Server resource utilization\n- Container performance metrics\n- Network latency and bandwidth\n- Storage performance and IOPS' :
  focus_area === 'network' ? '- Latency measurements and packet loss\n- Bandwidth utilization patterns\n- CDN and caching effectiveness\n- Load balancing efficiency' :
  '- Disk I/O performance and patterns\n- Storage capacity and growth trends\n- Backup and recovery performance\n- File system optimization opportunities'}

### 2. Optimization Strategies
${current_issues ? `**Addressing Current Issues:**\n- Root cause analysis of: ${current_issues}\n- Immediate remediation steps\n- Long-term prevention strategies\n\n` : ''}**Performance Improvements:**
- Quick wins for immediate impact
- Medium-term optimizations
- Long-term architectural improvements

Let me analyze your current ${focus_area} setup and provide specific recommendations...`
            }
          }
        ]
      };
    }
  );

  // ============ DISASTER RECOVERY PROMPTS ============

  server.registerPrompt(
    'disaster-recovery-plan',
    {
      title: 'Disaster Recovery Planning',
      description: 'Create comprehensive disaster recovery and business continuity plans',
      argsSchema: z.object({
        recovery_scope: z.enum(['application', 'database', 'full-infrastructure']).describe('Scope of disaster recovery planning'),
        rto_requirement: z.number().min(0).describe('Recovery Time Objective in hours'),
        rpo_requirement: z.number().min(0).describe('Recovery Point Objective in hours')
      })
    },
    async ({ recovery_scope, rto_requirement, rpo_requirement }: { recovery_scope: string; rto_requirement: number; rpo_requirement: number }) => {
      return {
        messages: [
          {
            role: 'user',
            content: {
              type: 'text',
              text: `I need to create a disaster recovery plan for my ${recovery_scope} in Coolify with:
- Recovery Time Objective (RTO): ${rto_requirement} hours
- Recovery Point Objective (RPO): ${rpo_requirement} hours

Please help me develop:
1. Risk assessment and impact analysis
2. Backup and restoration strategies
3. Failover and failback procedures
4. Testing and validation processes
5. Communication and escalation plans
6. Documentation and runbooks`
            }
          },
          {
            role: 'assistant',
            content: {
              type: 'text',
              text: `I'll help you create a comprehensive disaster recovery plan for your ${recovery_scope} with RTO of ${rto_requirement}h and RPO of ${rpo_requirement}h.

## Disaster Recovery Plan - ${recovery_scope.toUpperCase()}

### 1. Requirements Analysis
**Recovery Objectives:**
- RTO: ${rto_requirement} hours (maximum downtime acceptable)
- RPO: ${rpo_requirement} hours (maximum data loss acceptable)

**Implications:**
${rto_requirement <= 1 ? '- Near-zero downtime requirement - needs active-active setup\n- Automated failover systems required' :
  rto_requirement <= 4 ? '- Low downtime tolerance - automated recovery preferred\n- Standby systems should be readily available' :
  '- Moderate downtime acceptable - manual recovery procedures viable\n- Cost-effective backup strategies possible'}

${rpo_requirement <= 1 ? '- Continuous data replication required\n- Synchronous backup strategies needed' :
  rpo_requirement <= 4 ? '- Frequent backup intervals required\n- Near real-time data synchronization' :
  '- Regular backup intervals acceptable\n- Batch-based backup strategies viable'}

### 2. Current Infrastructure Assessment
Let me analyze your current ${recovery_scope} setup to identify:
- Critical components and dependencies
- Current backup and replication status
- Recovery capability gaps
- Risk exposure areas

### 3. Recovery Strategy Framework
${recovery_scope === 'application' ? '- Application-level failover mechanisms\n- Load balancer configuration\n- Session state management\n- Deployment automation' :
  recovery_scope === 'database' ? '- Database replication strategies\n- Backup and restore procedures\n- Point-in-time recovery capabilities\n- Data consistency validation' :
  '- Complete infrastructure replication\n- Cross-region redundancy\n- Orchestrated recovery sequences\n- Network failover strategies'}

Let me examine your current setup and create a detailed recovery plan...`
            }
          }
        ]
      };
    }
  );
}